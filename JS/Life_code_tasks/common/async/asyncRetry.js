/**
 * Функция asyncRetry предназначена для выполнения асинхронного действия с возможностью
 * повторных попыток в случае ошибки. Функция принимает два параметра:
 * 
 * @param {Function} callback - Асинхронная функция, которую необходимо повторить в случае ошибки.
 *                             Эта функция должна принимать аргументом функцию retry для вызова 
 *                             в случае ошибки.
 * @param {number} count - Максимальное количество попыток выполнить callback. 
 *                         Если количество попыток превышено, ошибка выводится в консоль.
 * 
 * Функция работает следующим образом:
 * 1. Выполняется callback. Если в процессе выполнения callback возникла ошибка, вызывается функция retry.
 * 2. Функция retry увеличивает количество попыток и вызывает callback заново после задержки,
 *    которая увеличивается с каждой попыткой (на 1000 мс за каждую попытку).
 * 3. Если количество попыток превышает count, функция выводит ошибку и прекращает повторные попытки.
 */
const asyncRetry = (callback, count) => {
    let retries = 0; // Счетчик количества попыток.
  
    // Вспомогательная функция retry вызывается при ошибке.
    const retry = err => {
      // Если количество попыток больше или равно указанному числу, выводим ошибку и прекращаем попытки.
      if (retries >= count) {
        console.error(err); // Вывод ошибки в консоль.
        return;
      }
      
      retries++; // Увеличиваем счетчик попыток.
      
      // Задержка перед повторным вызовом callback. Задержка увеличивается с каждой попыткой (на 1000 мс за каждую).
      setTimeout(() => callback(retry), retries * 1000);
    };
  
    // Первый вызов callback с передачей retry как аргумента, чтобы его можно было вызывать в случае ошибки.
    callback(retry);
  };
  