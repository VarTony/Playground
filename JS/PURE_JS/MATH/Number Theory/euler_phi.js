import { findPrimeFactorsWithPowers } from "./find_prime_factors_with_powers.mjs";

/*
Функция Эйлера φ(n) вычисляет количество чисел, меньших n, взаимно простых с n.

Математическое разложение числа n на простые множители:

    n = p[1]^{k[1]} * p[2]^{k[2]} * ... * p[m]^{k[m]}

где p[1], p[2], ..., p[m] — это уникальные простые числа, являющиеся делителями n, 
а k[1], k[2], ..., k[m] — это степени каждого простого числа.

Формула функции Эйлера для n, разложенного на простые множители:

    φ(n) = n * (1 - 1/p[1]) * (1 - 1/p[2]) * ... * (1 - 1/p[m])

Пример для n = 60:
    Разложение: 60 = 2^2 * 3 * 5
    φ(60) = 60 * (1 - 1/2) * (1 - 1/3) * (1 - 1/5)
          = 60 * 1/2 * 2/3 * 4/5
          = 16
*/

const eulerPhi = n => {
    const factors = Object.keys(findPrimeFactorsWithPowers(n)).map(Number);

    // Применяем формулу Эйлера 
    for(let p of factors) n *= 1 - (1/p);

    return Math.round(n); // Округляем результат, так как n может стать дробным из-за вычислений
}

export { eulerPhi };