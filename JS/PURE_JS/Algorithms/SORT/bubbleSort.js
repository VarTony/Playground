let testData = '2412 7 8 9 121 50 -18 37 1231 1 31 212 38 25'.split(' ');
testData = testData.map(char => +char);


/**
 * Реализация сортировки пузырьком (Bubble Sort).
 * 
 * Этот алгоритм многократно проходит по массиву, сравнивая пары соседних элементов и меняя их местами,
 * если они находятся в неправильном порядке. Этот процесс повторяется до тех пор, пока массив не будет отсортирован.
 * 
 * Сложность по времени:
 * - Худший и средний случай: O(n^2), где n - количество элементов в массиве. Это связано с тем, что алгоритм
 *   выполняет вложенные циклы для проверки и обмена всех пар элементов.
 * - Лучший случай: O(n), если массив уже отсортирован, так как в этом случае требуется всего один проход.
 * 
 * Сложность по памяти:
 * - O(n), так как алгоритм создаёт копию исходного массива, а также требует O(1) дополнительной памяти для переменных.
 * 
 * @param {Array} list - Массив элементов для сортировки.
 * @returns {Array} - Отсортированный массив.
 */
const bubbleSort = (list) => {
  list = [...list];
  let i = j = 0;
  const listSize = list.length;

  while(i < listSize) {
    while(j < listSize) {
      if(list[j] > list[j + 1]) [list[j + 1], list[j]] = [list[j], list[j + 1]];
      j++;
    }
    j = 0;
    i++;
  }
  return list;
}


const sortedData = bubbleSort(testData);
console.log('Data : ', testData);
console.log('Sorted_data : ', sortedData);
